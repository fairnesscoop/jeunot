input:not([type="checkbox"]),
textarea {
  display: block;
  width: 100%;
  max-width: var(--input-width, 40ch);
  color: var(--form-control-color, inherit);
  border: 1px solid var(--form-control-border-color);
  border-radius: var(--border-sm);
  padding: var(--v) var(--w);
}

textarea {
  --input-width: 50ch;
}

input:disabled,
textarea:disabled,
select:disabled {
  --form-control-border-color: var(--form-control-disabled);
  --form-control-color: var(--form-control-disabled);
  cursor: not-allowed;
}

/* Credit: https://moderncss.dev/pure-css-custom-checkbox-style/ */
input[type="checkbox"] {
  --form-control-color: var(--early-spring-night);
  /* Remove default styles */
  appearance: none;
  margin: 0;
  /* Add our styles */
  background-color: var(--white-smoke);
  width: var(--checkbox-size);
  height: var(--checkbox-size);
  border: 1px solid var(--form-control-border-color);
  border-radius: var(--border-xs);
  /* Center checked icon */
  display: inline-grid;
  place-content: center;
}
input[type="checkbox"]::before {
  content: "";
  width: calc(var(--checkbox-size) * 0.6);
  height: calc(var(--checkbox-size) * 0.6);
  /* Hide if unchecked */
  transform: scale(0);
  /* Draw the checkmark shape */
  /* Tool: https://bennettfeely.com/clippy/ */
  background-color: var(--form-control-color);
  clip-path: polygon(10% 46%, 38% 69%, 88% 5%, 99% 14%, 40% 90%, 1% 59%);
}
input[type="checkbox"]:checked::before {
  /* Reveal */
  transform: scale(1);
}
input[type="checkbox"]:hover {
  border-color: var(--form-control-color);
}

input.j-has-error {
  --form-control-border-color: var(--border-error);
}

/* Credit: https://blog.logrocket.com/creating-custom-select-dropdown-css/ */
.j-select {
  --form-control-color: var(--early-spring-night);
}
.j-select > select {
  /* Remove the default dropdown arrow */
  appearance: none;
  /* Our own styles */
  background-color: var(--background-default);
  border: 1px solid var(--form-control-border-color);
  border-radius: var(--border-sm);
  color: var(--form-control-color);
  padding: var(--w) calc(3 * var(--v));
  width: 100%;
  font-family: inherit;
  font-size: inherit;
  cursor: inherit;
  line-height: var(--line-height-select);
}
/* A custom dropdown arrow cannot be set on <select> itself. */
/* This is because ::after would be *inside* the <select> (at the end of its content), rather than after it. */
/* So we need a wrapper element. */
.j-select {
  position: relative;
}
.j-select::after {
  --dropdown-size: 0.5rem;
  content: "";
  position: absolute;
  top: calc(50% - var(--dropdown-size) / 2);
  right: calc(2 * var(--w));
  pointer-events: none;
  width: calc(1.5 * var(--dropdown-size));
  height: var(--dropdown-size);
  background-color: var(--form-control-color);
  clip-path: polygon(100% 0%, 0 0%, 50% 100%);
}

fieldset {
  padding: 0;
  border: none;
}

.j-input-group,
*:not(fieldset) > .j-checkbox-group,
.j-select-group,
fieldset {
  margin-bottom: calc(4 * var(--v));
}

.j-input-group > * + *,
.j-select-group > * + *,
fieldset > * + * {
  margin-top: var(--w);
}

:where(.j-input-group, .j-select-group) > label,
fieldset > legend {
  font-weight: var(--font-weight-bold);
  font-size: var(--font-size-label);
  line-height: var(--line-height-label);
}

:where(.j-input-group, .j-select-group) > label > .j-help-text {
  margin-top: var(--v);
}

.j-checkbox-group {
  display: flex;
  flex-wrap: nowrap;
  gap: var(--w);
}

.j-help-text {
  font-weight: var(--font-weight-md);
  font-size: var(--font-size-help);
  line-height: var(--line-height-help);
}

.j-error-message {
  color: var(--text-error);
}
